import os
import json
import logging
import re
import requests
import yaml # Th√™m th∆∞ vi·ªán yaml
import sys # Th√™m sys cho logging ra stdout
from flask import Flask, request, jsonify
from datetime import datetime
# Gi·∫£ ƒë·ªãnh module elk t·ªìn t·∫°i v√† c√≥ h√†m get_logs_for_instance
# N·∫øu elk.py kh√¥ng n·∫±m c√πng c·∫•p ho·∫∑c c·∫ßn thay ƒë·ªïi, h√£y ƒëi·ªÅu ch·ªânh import n√†y
from elk import get_logs_for_instance

# --- C·∫•u h√¨nh ·ª©ng d·ª•ng Flask ---
app = Flask(__name__)

# --- C·∫•u h√¨nh logging ---
# L·∫•y log level t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, m·∫∑c ƒë·ªãnh l√† INFO
log_level = os.environ.get("LOG_LEVEL", "INFO").upper()

# C·∫•u h√¨nh logger ƒë·ªÉ ghi ra console (stdout), Docker s·∫Ω b·∫Øt ƒë∆∞·ª£c log n√†y
logging.basicConfig(
    level=log_level,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout  # ƒê·∫£m b·∫£o log ƒë∆∞·ª£c ƒë·∫©y ra standard output
)

# ƒê·∫∑t t√™n cho logger theo t√™n file ƒë·ªÉ d·ªÖ ph√¢n bi·ªát
logger = logging.getLogger(__name__)

# --- C·∫•u h√¨nh k·∫øt n·ªëi v√† th∆∞ m·ª•c ---
RAG_ENGINE_URL = os.getenv("RAG_ENGINE_URL")
ALERTMANAGER_URL = os.getenv("ALERTMANAGER_URL")

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c l∆∞u tr·ªØ g·ª£i √Ω AI
ARCHIVE_DIR = "/app/ai_suggestions"
os.makedirs(ARCHIVE_DIR, exist_ok=True)
logger.info(f"Th∆∞ m·ª•c l∆∞u tr·ªØ g·ª£i √Ω AI: {ARCHIVE_DIR}")

# --- C√°c h√†m x·ª≠ l√Ω logic ---
def _build_prompt(data: dict) -> str:
    """
    X√¢y d·ª±ng prompt cho RAG Engine d·ª±a tr√™n d·ªØ li·ªáu c·∫£nh b√°o.
    """
    source = data.get("source", "LSTMDetector")
    instance_ip = data.get("instance", "unknown").split(":")[0]
    
    # L·∫•y log li√™n quan t·ª´ ELK. ƒê·∫£m b·∫£o h√†m get_logs_for_instance ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a v√† ho·∫°t ƒë·ªông.
    try:
        elk_logs = get_logs_for_instance(instance_ip, datetime.utcnow())
        log_section = f"**Log h·ªá th·ªëng li√™n quan (t·ª´ ELK):**\n```log\n{elk_logs or 'Kh√¥ng t√¨m th·∫•y log li√™n quan.'}\n```"
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y log t·ª´ ELK cho instance {instance_ip}: {e}")
        log_section = "**Log h·ªá th·ªëng li√™n quan (t·ª´ ELK):**\n```log\nKh√¥ng th·ªÉ truy xu·∫•t log li√™n quan do l·ªói.\n```"

    json_structure = """```json
{
  "source_document_title": "(L·∫•y t·ª´ metadata.title trong t√†i li·ªáu RAG. N·∫øu kh√¥ng c√≥ t√†i li·ªáu, ghi 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu tham kh·∫£o')",
  "system_code": "(L·∫•y t·ª´ metadata.system_code)",
  "affected_hosts": "(L·∫•y t·ª´ metadata.hosts, l√† m·ªôt danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng hostname/ip)",
  "diagnosis_summary": "(T·ª± suy lu·∫≠n m·ªôt c√¢u ch·∫©n ƒëo√°n ng·∫Øn g·ªçn d·ª±a tr√™n s·ª± c·ªë v√† t√†i li·ªáu)",
  "investigation_steps": "(L·∫•y t·ª´ actionable_plan.investigation_steps, l√† danh s√°ch c√°c b∆∞·ªõc ƒëi·ªÅu tra)",
  "remediation_playbooks": "(L·∫•y t·ª´ actionable_plan.remediation_playbooks, l√† danh s√°ch c√°c b∆∞·ªõc kh·∫Øc ph·ª•c)"
}
```"""
    prompt_header = ""
    incident_info = ""

    if source == "LogWatcher":
        prompt_header = "**S·ª± c·ªë ƒë∆∞·ª£c ph√°t hi·ªán t·ª´ Log**"
        incident_info = f"**Log g√¢y ra c·∫£nh b√°o:**\n`{data.get('trigger_log', 'N/A')}`"
    else: # M·∫∑c ƒë·ªãnh l√† LSTMDetector ho·∫∑c ngu·ªìn kh√°c
        prompt_header = "**S·ª± c·ªë ƒë∆∞·ª£c ph√°t hi·ªán t·ª´ Metric (LSTM)**"
        # B·ªè qua c√°c key kh√¥ng c·∫ßn thi·∫øt trong prompt n·∫øu kh√¥ng c√≥ gi√° tr·ªã
        metric_details_items = []
        for key, value in data.items():
            if key not in ["source", "severity", "timestamp"] and value is not None:
                metric_details_items.append(f"- {key}: {value}")
        
        if metric_details_items:
            incident_info = f"**Th√¥ng tin Metric:**\n" + "\n".join(metric_details_items)
        else:
            incident_info = "**Th√¥ng tin Metric:**\nKh√¥ng c√≥ chi ti·∫øt metric c·ª• th·ªÉ."
            
    final_prompt = (
        f"{prompt_header}\n\n"
        f"{incident_info}\n\n"
        f"{log_section}\n\n"
        f"**Y√äU C·∫¶U:** D·ª±a v√†o th√¥ng tin s·ª± c·ªë v√† t√†i li·ªáu RAG ƒë∆∞·ª£c cung c·∫•p (n·∫øu c√≥), "
        f"h√£y ƒëi·ªÅn ƒë·∫ßy ƒë·ªß v√†o c·∫•u tr√∫c JSON d∆∞·ªõi ƒë√¢y. TR·∫¢ V·ªÄ CH·ªà M·ªòT KH·ªêI JSON. KH√îNG GI·∫¢I TH√çCH.\n"
        f"{json_structure}"
    )
    logger.debug(f"Prompt ƒë√£ t·∫°o cho RAG Engine:\n{final_prompt}")
    return final_prompt

def _parse_rag_response(rag_raw_text: str) -> dict:
    """
    Ph√¢n t√≠ch ph·∫£n h·ªìi th√¥ t·ª´ RAG Engine ƒë·ªÉ tr√≠ch xu·∫•t JSON.
    """
    try:
        json_match = re.search(r'\{.*\}', rag_raw_text, re.DOTALL)
        if json_match:
            parsed_json = json.loads(json_match.group(0))
            logger.debug(f"ƒê√£ parse JSON t·ª´ ph·∫£n h·ªìi RAG: {parsed_json}")
            return parsed_json
        else:
            logger.warning(f"Kh√¥ng t√¨m th·∫•y kh·ªëi JSON trong ph·∫£n h·ªìi t·ª´ AI: {rag_raw_text[:500]}...")
            return {"diagnosis_summary": "Ph·∫£n h·ªìi t·ª´ AI kh√¥ng ch·ª©a JSON h·ª£p l·ªá."}
    except json.JSONDecodeError as e:
        logger.error(f"L·ªói khi parse JSON t·ª´ AI: {e}. Raw text: {rag_raw_text[:500]}...")
        return {"diagnosis_summary": f"L·ªói ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ AI: {e}"}
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi parse ph·∫£n h·ªìi RAG: {e}. Raw text: {rag_raw_text[:500]}...")
        return {"diagnosis_summary": f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi ph√¢n t√≠ch ph·∫£n h·ªìi t·ª´ AI: {e}"}

def _format_alert_for_gapo(data: dict, rag_result: dict) -> dict:
    """
    Format c·∫£nh b√°o th√†nh c·∫•u tr√∫c ph√π h·ª£p ƒë·ªÉ g·ª≠i ƒë·∫øn Alertmanager (ho·∫∑c Gapo).
    """
    instance = data.get("instance", "unknown")
    metric = data.get("metric", "log_error")
    severity = data.get("severity", "warning").upper()
    
    summary = f"[{severity}] `{rag_result.get('system_code', 'SYSTEM')}` - Ph√°t hi·ªán s·ª± c·ªë tr√™n `{instance}`"
    
    diag = f"**üìù Ch·∫©n ƒëo√°n:** > {rag_result.get('diagnosis_summary', 'N/A')}"
    sys_code = f"**üñ•Ô∏è H·ªá th·ªëng:** `{rag_result.get('system_code', 'N/A')}`"
    doc = f"**üìö Ngu·ªìn tri th·ª©c:** `{rag_result.get('source_document_title', 'N/A')}`"
    
    hosts_str = "**üìç M√°y ch·ªß ·∫£nh h∆∞·ªüng:**\n"
    affected_hosts = rag_result.get('affected_hosts', [])
    if affected_hosts and isinstance(affected_hosts, list):
        hosts_str += "\n".join([f"‚Ä¢ {h.get('hostname', 'N/A')} (`{h.get('ip', 'N/A')}`)" for h in affected_hosts])
    else:
        hosts_str += "‚Ä¢ Kh√¥ng x√°c ƒë·ªãnh"
    
    invest_str = "**üîç G·ª£i √Ω ƒëi·ªÅu tra (Investigation):**\n```\n"
    invest_steps = rag_result.get('investigation_steps', [])
    if invest_steps and isinstance(invest_steps, list):
        # ƒê·∫£m b·∫£o c√°c b∆∞·ªõc c√≥ 'name' v√† 'command'
        formatted_steps = []
        for i, s in enumerate(invest_steps):
            name = s.get('name', '')
            command = s.get('command', '')
            if name or command: # Ch·ªâ th√™m n·∫øu c√≥ n·ªôi dung
                formatted_steps.append(f"{i+1}. {name}:\n   {command}")
        invest_str += "\n".join(formatted_steps) if formatted_steps else "Kh√¥ng c√≥ g·ª£i √Ω."
    else:
        invest_str += "Kh√¥ng c√≥ g·ª£i √Ω."
    invest_str += "\n```"
    
    remed_str = "**üõ†Ô∏è G·ª£i √Ω x·ª≠ l√Ω (Remediation):**\n```\n"
    remed_steps = rag_result.get('remediation_playbooks', [])
    if remed_steps and isinstance(remed_steps, list):
        # ƒê·∫£m b·∫£o c√°c b∆∞·ªõc c√≥ 'name' v√† 'target'
        formatted_steps = []
        for i, s in enumerate(remed_steps):
            name = s.get('name', '')
            target = s.get('target', '')
            if name or target: # Ch·ªâ th√™m n·∫øu c√≥ n·ªôi dung
                formatted_steps.append(f"{i+1}. {name}:\n   {target}")
        remed_str += "\n".join(formatted_steps) if formatted_steps else "Kh√¥ng c√≥ g·ª£i √Ω."
    else:
        remed_str += "Kh√¥ng c√≥ g·ª£i √Ω."
    remed_str += "\n```"
    
    description = f"{diag}\n\n{sys_code}\n{hosts_str}\n{doc}\n\n---\n\n{invest_str}\n\n{remed_str}"
    
    formatted_alert = {
        "labels": {
            "alertname": f"AI_SRE_{metric}",
            "instance": instance,
            "severity": data.get("severity", "warning")
        },
        "annotations": {
            "summary": summary,
            "description": description.strip()
        }
    }
    logger.debug(f"C·∫£nh b√°o ƒë√£ format: {json.dumps(formatted_alert, indent=2)}")
    return formatted_alert

def _archive_suggestion(data: dict, rag_result: dict):
    """
    L∆∞u tr·ªØ to√†n b·ªô th√¥ng tin c·∫£nh b√°o v√† g·ª£i √Ω AI v√†o file YAML.
    """
    try:
        instance = data.get("instance", "unknown").replace(":", "_").replace("/", "_") # X·ª≠ l√Ω c√°c k√Ω t·ª± kh√¥ng h·ª£p l·ªá trong t√™n file
        metric = data.get("metric", "log_error")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{ARCHIVE_DIR}/{metric}_{instance}_{timestamp}.yml"

        archive_data = {
            "incident_details": data,
            "ai_suggestion": rag_result,
            "archive_timestamp": datetime.now().isoformat()
        }

        with open(filename, 'w', encoding='utf-8') as f:
            yaml.dump(archive_data, f, allow_unicode=True, indent=2, sort_keys=False)
        logger.info(f"ƒê√£ l∆∞u tr·ªØ g·ª£i √Ω v√†o file: {filename}")
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u tr·ªØ file g·ª£i √Ω: {e}", exc_info=True)


@app.route("/alert", methods=["POST"])
def alert_endpoint():
    """
    Endpoint nh·∫≠n c·∫£nh b√°o t·ª´ c√°c ngu·ªìn (LSTM, LogWatcher), g·ªçi RAG Engine
    v√† chuy·ªÉn ti·∫øp c·∫£nh b√°o ƒë√£ ƒë∆∞·ª£c l√†m gi√†u th√¥ng tin ƒë·∫øn Alertmanager.
    """
    if not RAG_ENGINE_URL:
        logger.error("Bi·∫øn m√¥i tr∆∞·ªùng RAG_ENGINE_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Kh√¥ng th·ªÉ g·ªçi RAG Engine.")
        return jsonify({"error": "RAG Engine URL not configured"}), 500
    if not ALERTMANAGER_URL:
        logger.error("Bi·∫øn m√¥i tr∆∞·ªùng ALERTMANAGER_URL ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Kh√¥ng th·ªÉ g·ª≠i c·∫£nh b√°o.")
        return jsonify({"error": "Alertmanager URL not configured"}), 500

    data = request.get_json()
    if not data:
        logger.warning("Request nh·∫≠n ƒë∆∞·ª£c kh√¥ng c√≥ d·ªØ li·ªáu JSON h·ª£p l·ªá.")
        return jsonify({"error": "Invalid JSON"}), 400

    logger.info(f"Nh·∫≠n ƒë∆∞·ª£c c·∫£nh b√°o t·ª´ {data.get('source', 'unknown')}: {json.dumps(data)}")

    # B∆∞·ªõc 1: X√¢y d·ª±ng prompt cho RAG Engine
    prompt = _build_prompt(data)

    # B∆∞·ªõc 2: G·ªçi RAG Engine
    rag_raw_response = ""
    try:
        logger.debug(f"ƒêang g·ªçi RAG Engine t·∫°i {RAG_ENGINE_URL}...")
        response = requests.post(RAG_ENGINE_URL, json={"message": prompt}, timeout=180) # Timeout 3 ph√∫t cho RAG
        response.raise_for_status() # N√©m exception n·∫øu response status code l√† l·ªói
        rag_raw_response = response.json().get("reply", "")
        logger.info("ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ RAG Engine.")
    except requests.exceptions.Timeout:
        logger.error(f"Request t·ªõi RAG Engine b·ªã timeout sau 180 gi√¢y.")
        rag_raw_response = '{"diagnosis_summary": "L·ªói: RAG Engine ph·∫£n h·ªìi qu√° th·ªùi gian (Timeout)."}'
    except requests.exceptions.ConnectionError as ce:
        logger.error(f"L·ªói k·∫øt n·ªëi t·ªõi RAG Engine t·∫°i {RAG_ENGINE_URL}: {ce}")
        rag_raw_response = '{"diagnosis_summary": "L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi RAG Engine."}'
    except requests.exceptions.RequestException as re:
        logger.error(f"L·ªói HTTP khi g·ªçi RAG Engine ({re.response.status_code}): {re.response.text}")
        rag_raw_response = f'{{"diagnosis_summary": "L·ªói HTTP t·ª´ RAG Engine ({re.response.status_code})."}}'
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi RAG Engine: {e}", exc_info=True)
        rag_raw_response = f'{{"diagnosis_summary": "L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi RAG Engine: {e}"}}'

    # B∆∞·ªõc 3: Parse ph·∫£n h·ªìi t·ª´ RAG Engine
    rag_result = _parse_rag_response(rag_raw_response)

    # B∆∞·ªõc 4: Format c·∫£nh b√°o cho Alertmanager (ho·∫∑c Gapo)
    final_alert = _format_alert_for_gapo(data, rag_result)

    # B∆∞·ªõc 5: L∆∞u tr·ªØ g·ª£i √Ω AI (archive)
    _archive_suggestion(data, rag_result)

    # B∆∞·ªõc 6: G·ª≠i c·∫£nh b√°o ƒë√£ l√†m gi√†u th√¥ng tin t·ªõi Alertmanager
    try:
        logger.info(f"ƒêang g·ª≠i c·∫£nh b√°o t·ªõi Alertmanager t·∫°i {ALERTMANAGER_URL}...")
        post_response = requests.post(ALERTMANAGER_URL, json=[final_alert], timeout=15)
        post_response.raise_for_status()
        logger.info("C·∫£nh b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng t·ªõi Alertmanager.")
        return jsonify({"status": "processed", "alert_sent": True, "alert_manager_response": post_response.text})
    except requests.exceptions.Timeout:
        logger.error(f"G·ª≠i c·∫£nh b√°o t·ªõi Alertmanager b·ªã timeout sau 15 gi√¢y.")
        return jsonify({"status": "error", "alert_sent": False, "message": "G·ª≠i t·ªõi Alertmanager b·ªã timeout"}), 500
    except requests.exceptions.ConnectionError as ce:
        logger.error(f"L·ªói k·∫øt n·ªëi t·ªõi Alertmanager t·∫°i {ALERTMANAGER_URL}: {ce}")
        return jsonify({"status": "error", "alert_sent": False, "message": "L·ªói k·∫øt n·ªëi t·ªõi Alertmanager"}), 500
    except requests.exceptions.RequestException as re:
        logger.error(f"L·ªói HTTP khi g·ª≠i c·∫£nh b√°o t·ªõi Alertmanager ({re.response.status_code}): {re.response.text}")
        return jsonify({"status": "error", "alert_sent": False, "message": f"L·ªói HTTP t·ª´ Alertmanager ({re.response.status_code})"}), 500
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i c·∫£nh b√°o t·ªõi Alertmanager: {e}", exc_info=True)
        return jsonify({"status": "error", "alert_sent": False, "message": f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"}), 500

if __name__ == '__main__':
    logger.info("Alert API ƒë√£ kh·ªüi ch·∫°y.")
    # Ch·∫°y Flask app tr√™n t·∫•t c·∫£ c√°c interface, c·ªïng 5001.
    # debug=True ch·ªâ n√™n d√πng trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn, kh√¥ng d√πng cho production.
    app.run(host='0.0.0.0', port=5001, debug=False) # ƒê·∫∑t debug=False cho production
